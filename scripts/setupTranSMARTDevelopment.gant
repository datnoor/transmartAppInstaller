import org.apache.tools.ant.taskdefs.Ant

/*************************************************************************
 * transmartAppInstaller meant for  tranSMART - translational medicine data mart
 *
 *
 * Apache License, Version 2.0, January 2004
 *
 * Copyright 2012 The Hyve B.V.
 *
 * Author : pieter lukasse (pieter@thehyve.nl)
 *
 ******************************************************************/



/**
 * This script automates the steps needed to setup:
 *
 * the tranSMART DB
 * the i2b2 DB
 * demo data
 *
 * It does this in a Postgres DB. This setup is well suited for a development environment.
 *
 * Pre-requisites (available from command line - or configured in setupTranSMARTDevelopment.properties):
 *
 *  - git
 *  - psql (postgres sql )
 *  - pre-configured jboss ( JBoss 4.2.2.GA see http://transmartproject.org/wiki/download/attachments/30441474/jboss-4.2.2.GA.tar.gz?version=1&modificationDate=1335242608000)
 *  - a properly configured setupTranSMARTDevelopment.properties
 *
 * NB: for running in IntelliJ/Grails: make sure you do NOT have ant jar files in the /lib folder...these will conflict with Grails .jars
 *
 * @author : pieter lukasse (pieter@thehyve.nl)
 */

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//note: make sure your GRAILS is 2.0.4 or higher...
//tested with version 2.0.4
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

def ant = new AntBuilder();

def properties = readProperties("setupTranSMARTDevelopment.properties")
properties.getAt = { getProperty(this, it) }

tools_git_cmd                    = properties["tools.git.cmd"]
tools_psql_cmd                   = properties["tools.psql.cmd"]
tools_ant_cmd                    = properties["tools.ant.cmd"]
tools_grails_cmd                 = properties["tools.grails.cmd"]
locations_jboss                  = properties["locations.jboss"]

ports_jboss                      = properties["ports.jboss"] //TODO jboss port can be read from ${locations_jboss}/server/default/deploy/jboss-web.deployer/server.xml
ports_solr                       = properties["ports.solr"]

locations_tomcat                 = properties["locations.tomcat"]
locations_plink_exec             = properties["locations.plink.executables"]

build_dir                        = properties["locations.build.out"]
transmart_db_name                = "transmart"  //better keep it with this value for now...script does not deal with other names for now  (e.g. still a problem in - a. Create the transmart database (can use script transmart-db.sql))
transmart_db_tablespace_location = properties["locations.db.tablespaces"]
transmartuser_home               = properties["locations.transmartuser.home"]

postgres_user                    = properties['postgres.user']
working_db                       = properties['postgres.workingdb']

webapps_subdir                   = 'applications'
webapps_data                     = 'appdata'

//some handy derived globals:
ant_last_step_output             = getTempDir() + "/ant_last_step_out.txt"
psql_location                    = new File(tools_psql_cmd).parent
postgres_login_par		 = "-U"

if (System.properties['os.name'].toLowerCase().contains('windows'))
    host_os_type = "windows"
else
    host_os_type = "unix"

if (host_os_type == "windows") {
    path_sep = "\\"
    exec_postfix = ".exe"
}
else {
    path_sep = "/"
    exec_postfix = ""
}

target('default': "cleanup and setup") {
    depends(setup)
    clean()
    install()
}

target(setup: "any initializations") {

}

target(clean: "clean-up to run again...")
{
    //drop postgres "transmart" db:
    def command =  [getDirPath(psql_location, "dropdb"+exec_postfix), postgres_login_par, postgres_user, transmart_db_name]
    commandStep(command, false)

    //remove <user_home>/.grails/transmartConfig files:
    def transmartConfigAtUserHome = transmartuser_home + "/.grails/transmartConfig"
    delete(dir: transmartConfigAtUserHome)

    //remove all git checkouts:
    delete(dir: build_dir.replaceAll("\"", "")) //delete command apparently does not work well with quotes..so remove them..

}

target(install: "The installation script") {

//    Build tranSMART demo-data Tables
//
//    github - clone script repository
//    create/find and cd to your github directory
//    git clone https://github.com/transmart/transmartApp-DB
//    change to branch: create a “tracking branch” for postgresMigrate
//    cd transmartApp-DB
//    git checkout -b postgresMigrate origin/postgresMigrate
//    Build initiial PostgreSQL databases (for both transMart and i2b2)
//    cd postgresql , then instructions in readme
    gitStep("https://github.com/transmart/transmartApp-DB", getDirPath(build_dir,"transmartApp-DB"), "postgresMigrate", true)

//    There are 3 main steps to creating the transmart database:
//    1.  Create the transmart schemas (and all objects not part of i2b2 or ETL)
//    2.  Execute the i2b2 postgresql database import scripts to
//    create the transmart-specific i2b2 objects, linkages, and data
//    3.  Create the ETL schema objects

//    Prior to executing the script:
//    a. Create the transmart database (can use script transmart-db.sql)
    createTransmartDB()
//    b. In tablespaces.sql, update the directory locations of the tablespaces to be created.
    ensureTablespaces()

//   Step 1:
//    The create-main.sql script will drop and then create schemas, objects,
//    and seed data in the transmart database. Takes quite some time
    populateTransmartDB()

    verifyTransmartDB()

//    Step 2: Execute the i2b2 postgresql import scripts

    downloadI2B2()
    
    executeI2b2ImportScripts()

//    Step 3: Post-i2b2 scripts (substitute for localhost, if appropriate)
    executePostI2b2Scripts()

    configSteps()
}

target(configSteps: "final configuration steps")
{
    configTransmartApp()

    buildAndInstallRDCmodule()
}

target(populateTransmartDB: "populateTransmartDB - filling the database. Please wait, this can take some minutes... ")
{
    dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/create-main.sql"), postgres_user, transmart_db_name, true, false, getDirPath(build_dir, "transmartApp-DB/postgresql", false))
}

target(verifyTransmartDB: "verify transmartDB data is OK")
{
//  Verify SEARCHAPP table row counts using searchapp/data/check_counts.sql.
    verifySEARCHAPPdata()
//  Verify DEAPP table row counts using deapp/data/check_counts.sql.
    verifyDEAPPdata()
//  Verify BIOMART table row counts using biomart/data/check_counts.sql.
    verifyBIOMARTdata()
}

target(buildAndInstallRDCmodule: "Building and installing the RDC module")
{
    //git clone https://github.com/transmart/Rmodules.git   -b postgresMigrate
    def transmartRDCDir = getDirPath(build_dir, "transmart_Rmodules")
    gitStep("https://github.com/transmart/Rmodules.git", transmartRDCDir, "postgresMigrate")

    //grails package-plugin
    def command =  ["${tools_grails_cmd}", "package-plugin"]
    commandStep(command, true, transmartRDCDir)

    //grails install-plugin grails-rdc-rmodules-0.2.zip
    command =  ["${tools_grails_cmd}", "install-plugin grails-rdc-rmodules-0.2.zip"]
    commandStep(command, true, transmartRDCDir)
}

target(downloadI2B2: "Downloading and installing i2b2 version of tranSMART 1.0 GA")
{
    def archive_file = getDirPath(build_dir, "jboss.tar.gz")

    //download i2b2 archive
    ant.get(
        src: "http://transmartproject.org/wiki/download/attachments/30441474/jboss-4.2.2.GA.tar.gz?version=1&modificationDate=1335242608000",
        dest: archive_file
    )

    //extract archive
    ant.untar(src: archive_file, dest: locations_jboss, compression: "gzip")
}


target(configTransmartApp: "setting up the configuration files in <user home>/.grails/transmartConfig/")
{
    //git clone https://github.com/transmart/transmartApp-Config.git  branch   postgresMigrate
    def transmartConfigDir = getDirPath(build_dir, "transmartApp-Config")
    gitStep("https://github.com/transmart/transmartApp-Config.git", transmartConfigDir, "postgresMigrate")

//    Checkout contains:
//    External configuration files for transmart application
//    Config.groovy - transmart application configuration file
//    DataSource.groovy - jdbc and connection pool configuration
//    RmodulesConfig.groovy - configuration file for the R plugin module
//
//    these files should be put under this folder:
//        ${transmartUser HOME Dir}/.grails/transmartConfig

//    TODO NOTE: the name of the configuration directory is determined by the name
//    of the application, and the name of the application is set in the file
//    application.properties in the top level directory of transmartApp. For now, this script is assuming the name "transmart" is set.

    def transmartConfigAtUserHome = transmartuser_home + "/.grails/transmartConfig"
    mkdir(dir: transmartConfigAtUserHome)

    //Copy all .groovy files to this folder:
    copy(todir: transmartConfigAtUserHome) {
        fileset (dir: transmartConfigDir) {
            include(name: "*.groovy")
        }
    }
    //nb: the ant as in "ant.copy" above is not needed. Calling Ant tasks in a Gant closure is so common that Gant automatically
    //tries the ant object during function lookup. Hence the ant. prefix is not needed

    //adjust Config.groovy:
    def configGroovy = transmartConfigAtUserHome + "/Config.groovy"

    replacePropertyInFile(configGroovy,
            "com.recomdata.searchengine.index", locations_tomcat + "/" + webapps_data + "/transmart/index", true)

    // i2b2 project management cell url
    replacePropertyInFile(configGroovy,
            "com.recomdata.datasetExplorer.pmServiceURL", "http://localhost:${ports_jboss}/i2b2/rest/PMService/", true)

    //TODO  genePattern (tool from BroadInstitute) settings?

    //PLINK config: Whole genome association analysis toolset from http://pngu.mgh.harvard.edu/~purcell/plink/
    replacePropertyInFile(configGroovy,
            "com.recomdata.datasetExplorer.plinkExcutable", locations_plink_exec, true)

    //SOLR ("Lucene-based search server" from Apache) config:
    replacePropertyInFile(configGroovy,
            "com.recomdata.solr.baseURL", "http://localhost:${ports_solr}", true)


    //This is the directory to the R plugins.
    replacePropertyInFile(configGroovy,
            "com.recomdata.plugins.pluginScriptDirectory",
            locations_tomcat + "/" + webapps_subdir + "/transmart/plugins/", true)

    //This is the main temporary directory, under this should be the folders that get created per job.
    replacePropertyInFile(configGroovy,
            "com.recomdata.plugins.tempFolderDirectory", getTempDir() + "jobs", true)

    //Use this to do local development.  It causes the analysis controllers to move the image file before rendering it.
    replacePropertyInFile(configGroovy,
            "com.recomdata.plugins.transferImageFile", "true", false)

    //This is the system path where we move the image file to so we can serve it.
    replacePropertyInFile(configGroovy,
            "com.recomdata.plugins.temporaryImageFolder",
            locations_tomcat + "/" + webapps_subdir + "/transmart/images/tempImages/", true)

    //some dir related to R ?
    replacePropertyInFile(configGroovy,
            "com.recomdata.transmart.data.export.rScriptDirectory",
            locations_tomcat + "/" + webapps_subdir + "/transmart/dataExportRScripts", true)


    //TODO : do something with com.recomdata.plugins.analysisImageURL?


    //TODO - edit DataSource.config to reflect your postgreSQL (you might have to change host, port, username, password)    - this is left with DEFAULT values for now



    //Edit RModulesConfig.groovy, look at these values
    //
    //    pluginScriptDirectory
    //    tempFolderDirectory
    //    temporaryImageFolder (writable)
    //    imageURL (corresponds to temporaryImageFolder) - TODO - check how this can be used...?
    def rmodulesGroovy = transmartConfigAtUserHome + "/RModulesConfig.groovy"
    //pluginScriptDirectory, temporaryImageFolder
    replaceInFile(rmodulesGroovy, "/your/tomcat", locations_tomcat)
     //tempFolderDirectory
    replaceInFile(rmodulesGroovy, "tempFolderDirectory = \"/var/tmp/jobs/\"", "tempFolderDirectory = \"" + getTempDir() +"jobs/\"" )

}


target(executePostI2b2Scripts: "the POST I2b2 Import Scripts")
 {
//     This includes the ETL schema objects (first, because of dependencies)
//
//     a. psql -h localhost -U postgres -d transmart -f i2b2-grants.sql --quiet
//     b  psql -h localhost -U postgres -d transmart -f etl/start.sql --quiet
//     c. psql -h localhost -U postgres -d transmart -f post-i2b2.sql --quiet

     dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/i2b2-grants.sql"), postgres_user, transmart_db_name, true, false, getDirPath(build_dir,"transmartApp-DB/postgresql"))
     dbScriptStep(getDirPath(build_dir,"transmartApp-DB/postgresql/etl/start.sql"), postgres_user, transmart_db_name, true, false, getDirPath(build_dir,"transmartApp-DB/postgresql"))
     dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/post-i2b2.sql"), postgres_user, transmart_db_name, true, false, getDirPath(build_dir,"transmartApp-DB/postgresql"))
 }

target(executeI2b2ImportScripts: "execute I2b2 Import Scripts")
{
    //    a. Execute the i2b2_prerequisites.sql script
    dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/i2b2_prerequisites.sql"), postgres_user, transmart_db_name, true, false)

//    Download i2b2 upgrades and data loading for PostgreSQL upgrade - github/transmart/i2b2_1.6_postgres
//    Use master branch
    def i2b2Dir = getDirPath(build_dir, "i2b2_1.6_postgres")
    gitStep("https://github.com/transmart/i2b2_1.6_Postgres.git", i2b2Dir)
    //same as git@github.com:transmart/i2b2_1.6_Postgres.git? TODO: check

//    a2.  Execute the i2b2 postgresql import scripts
//    From i2b2Dir/readme :
//    see demodata/src/src/edu.harvard.i2b2.data/Release_1-6/NewInstall/Data load instructions.docx
//    and coreserver/src/README.txt

//    demodata - scrips for building the postgres version of the demo data
    i2b2Demodata()

//    coreserver - source files for building the core i2b2 modules used by tranSMART
    i2b2Coreserver()
}

target(i2b2Demodata: "loading i2b2 demo data")
{
    def i2b2Dir = getDirPath(build_dir, "i2b2_1.6_postgres")  //TODO remove this redundant line of code...
    def demodataDir = i2b2Dir + "/demodata/src/src/edu.harvard.i2b2.data/Release_1-6/NewInstall/"
    //    1. Set appropriate values for properties mentioned in db.properties file    //TODO - db.properties are not yet updated here
    def command =  ["${tools_ant_cmd}", "setup_db_properties"]
    commandStep(command, true, demodataDir)
    command =  ["${tools_ant_cmd}", "load_pmdata"]
    commandStep(command, true, demodataDir)
    command =  ["${tools_ant_cmd}", "load_hivedata"]
    commandStep(command, true, demodataDir)
    command =  ["${tools_ant_cmd}", "load_demodata"]
    commandStep(command, true, demodataDir)
    command =  ["${tools_ant_cmd}", "load_metadata"]
    commandStep(command, true, demodataDir)
    command =  ["${tools_ant_cmd}", "load_workdata"]
    commandStep(command, true, demodataDir)
}


//TODO: check if this target is needed for DEVELOPMENT setup...or is it just prod...? Anyway, it is working.
target(i2b2Coreserver: "i2b2Coreserver - building the core i2b2 modules used by tranSMART")
{
    def i2b2Dir = getDirPath(build_dir, "i2b2_1.6_postgres")  //TODO remove this redundant line of code...
//    coreserver - source files for building the core i2b2 modules used by tranSMART
    def coreserver_subdir = i2b2Dir + "/coreserver/src"
//
//    SUMMARY of all the files that need modification
//    (relative to BASE_DIR)
//    ./edu.harvard.i2b2.common/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
//    ant clean dist deploy jboss_pre_deployment_setup
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.common/build.properties",
                            "jboss.home", locations_jboss)
    def command =  ["${tools_ant_cmd}", "clean dist deploy jboss_pre_deployment_setup"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.common")
//
//    ./edu.harvard.i2b2.pm/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    //>>>>>> TODO - not done now:
//            ./edu.harvard.i2b2.pm/etc/jboss/pm-ds.xml
//     you may have to modify: connection-url, user-name, and password
    //<<<<<<<
//    ant -f master_build.xml clean build-all deploy
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.pm/build.properties",
            "jboss.home", locations_jboss)
    command =  ["${tools_ant_cmd}", "-f master_build.xml clean build-all deploy"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.pm")
//
//    ./edu.harvard.i2b2.ontology/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.ontology/build.properties",
            "jboss.home", locations_jboss)
    //>>>>>> TODO - not done now:
//            ./edu.harvard.i2b2.ontology/etc/jboss/ont-ds.xml
//    you may have to modify: connection-url, user-name, and password
//    changes may be necessary for: i2b2hive, i2b2metadata, and i2b2metadata2
    //<<<<<<<
//        ./edu.harvard.i2b2.ontology/etc/spring/ontology_application_directory.properties
//    set edu.harvard.i2b2.ontology.applicationdir
//    to YOUR_JBOSS_HOME_DIR/server/default/conf/ontologyapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.ontology/etc/spring/ontology_application_directory.properties",
            "edu.harvard.i2b2.ontology.applicationdir", locations_jboss + "/server/default/conf/ontologyapp")
//    ant -f master_build.xml clean build-all deploy
    command =  ["${tools_ant_cmd}", "-f master_build.xml clean build-all deploy"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.ontology")
//
//    ./edu.harvard.i2b2.crc.loader/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crc.loader/build.properties",
            "jboss.home", locations_jboss)
//            ./edu.harvard.i2b2.crc.loader/etc/spring/crc_loader_application_directory.properties
//    set edu.harvard.i2b2.crc.loader.applicationdir to be
//    YOUR_JBOSS_HOME_DIR/server/default/conf/crcapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crc.loader/etc/spring/crc_loader_application_directory.properties",
            "edu.harvard.i2b2.crc.loader.applicationdir", locations_jboss + "/server/default/conf/crcapp")
//    ant -f build.xml clean dist
    command =  ["${tools_ant_cmd}", "-f build.xml clean dist"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.crc.loader")
//
//    ./edu.harvard.i2b2.crcplugin.patientcount/build.properties
//    crcplugin.home=YOUR_JBOSS_HOME_DIR/server/default
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crcplugin.patientcount/build.properties",
            "crcplugin.home", locations_jboss + "/server/default")
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crcplugin.patientcount/build.properties",
            "jboss.home", locations_jboss)
//            ./edu.harvard.i2b2.crcplugin.patientcount/etc/spring/patientcount_application_directory.properties
//    set edu.harvard.i2b2.crcplugin.pb.applicationdir
//    to YOUR_JBOSS_HOME_DIR/server/default/conf/crcapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crcplugin.patientcount/etc/spring/patientcount_application_directory.properties",
            "edu.harvard.i2b2.crcplugin.pb.applicationdir", locations_jboss + "/server/default/conf/crcapp")
//    no build HERE???
//
//    ./edu.harvard.i2b2.crc/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crc/build.properties",
            "jboss.home", locations_jboss)
//            ./edu.harvard.i2b2.crc/etc/spring/crc_application_directory.properties
//    set edu.harvard.i2b2.crc.applicationdir to be
//    YOUR_JBOSS_HOME_DIR/server/default/conf/crcloaderapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.crc/etc/spring/crc_application_directory.properties",
            "edu.harvard.i2b2.crc.applicationdir", locations_jboss + "/server/default/conf/crcloaderapp")
//    ant -f master_build.xml clean build-all deploy
    command =  ["${tools_ant_cmd}", "-f master_build.xml clean build-all deploy"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.crc")
//
//    ./edu.harvard.i2b2.workplace/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.workplace/build.properties",
            "jboss.home", locations_jboss)
//            ./edu.harvard.i2b2.workplace/etc/spring/workplace_application_directory.properties
//    set edu.harvard.i2b2.workplace.applicationdir
//    to YOUR_JBOSS_HOME_DIR/server/default/conf/workplaceapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.workplace/etc/spring/workplace_application_directory.properties",
            "edu.harvard.i2b2.workplace.applicationdir", locations_jboss + "/server/default/conf/workplaceapp")
//    ant -f master_build.xml clean build-all deploy
    command =  ["${tools_ant_cmd}", "-f master_build.xml clean build-all deploy"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.workplace")
//
//
//    ./edu.harvard.i2b2.fr/build.properties
//    jboss.home=YOUR_JBOSS_HOME_DIR
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.fr/build.properties",
            "jboss.home", locations_jboss)
//            ./edu.harvard.i2b2.fr/etc/spring/fr_application_directory.properties
//    set edu.harvard.i2b2.fr.applicationdir
//    to YOUR_JBOSS_HOME_DIR/server/default/conf/frapp
    replacePropertyInFile(coreserver_subdir + "/edu.harvard.i2b2.fr/etc/spring/fr_application_directory.properties",
            "edu.harvard.i2b2.fr.applicationdir", locations_jboss + "/server/default/conf/frapp")
//    ant -f master_build.xml clean build-all deploy
    command =  ["${tools_ant_cmd}", "-f master_build.xml clean build-all deploy"]
    commandStep(command, true, coreserver_subdir + "/edu.harvard.i2b2.fr")
}

target(createTransmartDB: "createTransmartDB")
{
    def f = File.createTempFile("createdb", ".sql")
    f << "CREATE DATABASE $transmart_db_name WITH OWNER = $postgres_user TEMPLATE template0"

    dbScriptStep(f.absolutePath, postgres_user, working_db, false, false)
}

target(ensureTablespaces: "createTablespaces")
{
    println("Ensure ${transmart_db_tablespace_location} tablespace location directories are present")
    mkdir(dir: transmart_db_tablespace_location)
    ['deapp','biomart','transmart','indx','search_app'].each {
        def db_dir = transmart_db_tablespace_location + path_sep + it;

        mkdir(dir: db_dir);
        chown(owner: 'postgres', type: 'dir', file: db_dir)
    }
    fixTablespaceLocation(getDirPath(build_dir, "transmartApp-DB/postgresql/tablespaces.sql", false))
    //nb: no need to execute this script here...just fixing it...this is a prep for a later step
}

target(verifySEARCHAPPdata: "verify SEARCHAPP data")
{
    dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/searchapp/data/check_counts.sql"), postgres_user, transmart_db_name, true, false, ".")
    //TODO - below should work but is hanging as ant.exec does not seem to be passing the given inputstring to the stdin...so process is hanging waiting for biomart_user's password.
    //TODO (CONT) -       So find out why ant is failing here and how to fix it...looked at various sites but could not find an answer or similar case...
    //dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/searchapp/data/check_counts.sql"), "biomart_user", transmart_db_name, true, false, ".", "biomart_user")

    FileReader reader = new FileReader(ant_last_step_output)
    def lines = reader.readLines()

    //verify some of the counts:
    assertEquals(lines.get(2),"SEARCH_KEYWORD_TERM           | 105844")
    assertEquals(lines.get(3),"SEARCH_KEYWORD                |  42114")
    assertEquals(lines.get(4),"SEARCH_REQUEST_MAP            |     17")
    assertEquals(lines.get(5),"PLUGIN_MODULE                 |     11")
}


target(verifyDEAPPdata: "verify DEAPP data")
{
    dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/deapp/data/check_counts.sql"), postgres_user, transmart_db_name, true, false, ".")

    FileReader reader = new FileReader(ant_last_step_output)
    def lines = reader.readLines()

    //verify some of the counts:
    assertEquals(lines.get(2),"DE_SUBJECT_MICROARRAY_DATA | 54400")
    assertEquals(lines.get(3),"DE_MRNA_ANNOTATION         |  5440")
    assertEquals(lines.get(4),"DE_SUBJECT_SAMPLE_MAPPING  |    10")
    assertEquals(lines.get(5),"DE_SAVED_COMPARISON        |     5")
}

target(verifyBIOMARTdata: "verify DEAPP data")
{
    dbScriptStep(getDirPath(build_dir, "transmartApp-DB/postgresql/biomart/data/check_counts.sql"), postgres_user, transmart_db_name, true, false, ".")

    FileReader reader = new FileReader(ant_last_step_output)
    def lines = reader.readLines()

    //verify some of the counts:
    assertEquals(lines.get(2),"BIO_ASSAY_FEATURE_GROUP     | 237002")
    assertEquals(lines.get(3),"BIO_ASSAY_ANALYSIS_DATA     | 184538")
    assertEquals(lines.get(4),"BIO_DATA_EXT_CODE           | 134965")
    assertEquals(lines.get(5),"BIO_DATA_UID                | 126764")
}


//======================= UTILITY METHODS ==============================================================

def assertEquals(value, reference)
{
    print("checking: " + value + " = " + reference + "...")
    assert value.trim().equals(reference)
    println("\t OK!")
}


def commandStep(command, failOnError, dir=".", inputString=null, quiet=true, timeout=600000, output=ant_last_step_output)
{
    println "About to execute $command on dir ${dir ? dir : 'CWD' }..."
    System.in.read()
    System.in.skip(System.in.available())

    //workaround for quotes in dir...this gives problems, so remove all
    dir = dir.replaceAll("\"", "")

    try{


        def executable = command.get(0)
        //remove executable from list:
        command.remove(0)
        def arguments = listToString(command)//.toString().replaceAll(",", " ")

        println("Executing " + executable + " " +arguments.toString() )
        //println("Failonerror= " + failOnError)

        def ant = new AntBuilder()   // create an antbuilder
        if (inputString == null)
        {
             ant.exec(dir: dir,
                    failonerror: failOnError,
                    output: output,
                    timeout: timeout,
                    executable: executable)
                    {
                        arg(line: arguments)
                    }
        }
        else
        {
            ant.exec(dir: dir,
                    failonerror: failOnError,
                    inputstring: inputString,
                    output: output,
                    timeout: timeout,
                    executable: executable)
                    {
                        arg(line: arguments)
                    }

        }
    }
    catch(Exception e)
    {
        println "Exception was raised: ${e.getMessage()}"
    }
    finally
    {
    if (!quiet && output.equals(ant_last_step_output))
        // Print command output to console
        ant.concat { fileset(
            file: ant_last_step_output
        ) }
    }

}



def gitStep(repositoryUrl, destDir, branch=null, failOnError=true)
{
    // Ant.exec could also be an option...but is not really simpler than below...

    def targetDir = new File(destDir)

    if (!targetDir.exists()) {
    	def command = [tools_git_cmd, 'clone', repositoryUrl, destDir]
	    //checkout specified branch :
    	if (branch)
    	{
            command.add("-b")
            command.add(branch)
    	}
    	commandStep(command, failOnError, ".", null, false, 600000) //TODO show progress...perhaps by reading output in a separate thread...?
    }
    else {
        /* maybe we should check whether the repository is dirty/deviated from origin & abort */

        def command = [tools_git_cmd, 'fetch -q origin']
        commandStep(command, failOnError, destDir, null, false, 600000)

        command = [tools_git_cmd, 'rev-parse', '--abbrev-ref', '--symbolic-full-name',  '@{u}']
        def proc = command.execute([], targetDir)
        proc.waitFor()
        def ref = proc.in.text.trim()

        command = [tools_git_cmd, 'reset', '--hard', '-q', ref]
        commandStep(command, failOnError, destDir)
    }
}


//TODO : we can also add a parameter "host" and use -h host to execute the scripts on a remote DB...
def dbScriptStep(scriptFileName, user, databaseName, failOnError=true, quiet=true, dir=".", password=null)
{
    println "About to execute SQL script $scriptFileName"

    def command =  [tools_psql_cmd, postgres_login_par, user, "-f", scriptFileName]
    //checkout specified branch :
    if (databaseName)
    {
        command.add("-d")
        command.add(databaseName)
    }
    if (quiet)
    {
        command.add("--quiet")
    }
    commandStep(command, failOnError, dir, password, quiet, 30000000)//500min timeout ...
}


def replaceInFile(String fileName, String value, String newValue)
{
    def fileAsString = file2String(fileName)
    fileAsString = fileAsString.replaceAll(value, newValue)
    string2File(fileAsString, fileName)
}


def fixTablespaceLocation(String scriptFileName)
{
    //read script file and replace
    // /opt/PostgreSQL/9.1/data/tablespaces/
    //with
    // transmart_db_tablespace_location
    def scriptTemp = file2String(scriptFileName)
    scriptTemp = scriptTemp.replaceAll("/opt/PostgreSQL/9.1/data/tablespaces", transmart_db_tablespace_location)
    string2File(scriptTemp, scriptFileName)
    return scriptFileName;
}

/**
 * quick method, handy for SMALL files
 *
 * @return
 * @throws java.io.IOException
 */
public static String file2String(String fileName) throws IOException
{
    InputStream fileInputStream = new FileInputStream(new File(fileName))
    String result = "";
    try
    {
        byte[] buf = new byte[2048];
        int i = 0;
        while((i=fileInputStream.read(buf))!=-1)
        {
            result += new String(buf, 0, i);
        }
    }
    finally
    {
        fileInputStream.close();
    }
    return result;
}

private static String string2File(String value, String fileName) throws IOException
{
    FileWriter outFile = new FileWriter(fileName);

    try
    {
        outFile.write(value)
    }
    finally
    {
        outFile.close();
    }

}


/**
 * This method will translate the given list to a \n separated string
 *
 * @param valuesList
 * @return
 */
def listToString(valuesList)
{
    String result = "";
    for (String value : valuesList)
    {
        result += value + " ";
    }
    return result;
}

//Alternative for ant.property method which does not seem to work...
//ant.property( file : 'D:\\development\\transmartAppInstaller\\scripts\\setupTranSMARTDevelopment.properties' )  //TODO : find out how to read out these properties. Then we could set properties below in the .properties file and read it out from there
//def properties = ant.getProperties();
def readProperties(propertiesFileName)
{
    def propertiesFile = new FileReader(propertiesFileName)
    def properties = new Properties()
    properties.load(propertiesFile)
    return properties
}
/**
 * This method will replace the value of the given property with the given value in the
 * property file.
 *
 * @param propertiesFileName : .property file to change
 * @param propertyName       : the property to change (e.g. "jboss.home" )
 * @param newPropertyValue   : the new value for this property
 * @param putQuotes          : if it is a Groovy properties file, then we should (?) quote string (like file paths)
 */
def replacePropertyInFile(propertiesFileName, propertyName, newPropertyValue, putQuotes = false)
{
    //workaround for quotes in dir...this gives problems, so remove all
    propertiesFileName = propertiesFileName.replaceAll("\"", "")
    if (putQuotes)
        newPropertyValue = "\"" + newPropertyValue + "\""

    def propertiesFileContent = file2String(propertiesFileName)
    propertiesFileContent = propertiesFileContent.replaceAll(propertyName + ".*\\n", propertyName + " = " + newPropertyValue + "\n")
    string2File(propertiesFileContent, propertiesFileName)

    / * the implementation below is more elegant, but it messes up the properties file (both the order of the properties and the comments)
    def properties = readProperties(propertiesFileName)
    properties.setProperty(propertyName, newPropertyValue)
    def output = new FileOutputStream(propertiesFileName)   */
    //the # character added here gives problems in Groovy parser ! properties.store(output, "# nb: " + propertyName + " changed by transmastAppIntaller ")
    //output.close()
}

/**
 * Returns the system/user's temporary directory
 *
 * @return
 */
def getTempDir()
{
    def result = System.getProperty("java.io.tmpdir")
    //replace \\ by / :
    result = result.replaceAll("\\\\", "/")
    return result
}

/**
 * Returns the property value and adds quotes to it if necessary (e.g. property has white space in it)
 *
 * @param properties
 * @param s
 * @return
 */
def getProperty(Properties properties, String propertyName)
{
    def propertyValue = properties.getProperty(propertyName)
    //check if property has white space. If yes, add quotes where necessary
    if (propertyValue.contains(" "))
    {
        if (!propertyValue.startsWith("\""))
            propertyValue = "\"" + propertyValue

        if (!propertyValue.endsWith("\""))
            propertyValue = propertyValue + "\""

    }
    return propertyValue
}

/**
 * This method is a workaround for problems in directory names when one of the directories has a white space
 *
 * @param dir : the directory to which we want to concatenate an extra part
 * @param subPath : part of the directory or file name path to concatenate to the directory in "dir"
 * @addQuotes: whether the final concatenated pathname should have surrounding quotes or not. For some APIs (like the Java File API) the
 *             quotes will cause errors, while in others it is absolutely necessary.
 */
def getDirPath(dir, subPath, addQuotes=true)
{
   //if dir has a white space, the concat of dir + subdir should be surrounded by quotes,
   //but first remove all quotes from dir:
   dir = dir.replaceAll("\"", "")
   if (dir.contains(" ") && addQuotes)
        return "\"" + dir + "/" + subPath + "\""
   else
        return dir + "/" + subPath
}
